리스트와 맵과 더불어 Go에서는 container 패키지를 통해 이용 가능한 다양한 컬렉션을 제공한다. 한 예로 container/list 패키지를 살펴보자.

리스트
container/list 패키지에는 이중 연결 리스트(doubly-linked list)가 구현돼 있다. 연결 리스트는 다음과 같은 형태의 자료구조다.

이중 연결 리스트

리스트의 각 노드에는 값(이 경우 1, 2, 3)과 다음 노드를 가리키는 포인터가 담긴다. 이것은 이중 연결 리스트라서 각 노드에는 이전 노드를 가리키는 포인터도 담겨 있다. 이 리스트는 다음과 같은 프로그램으로 만들 수 있다.

package main
 
import ("fmt" ; "container/list")
 
func main() {
    var x list.List
    x.PushBack(1)
    x.PushBack(2)
    x.PushBack(3)
 
    for e := x.Front(); e != nil; e=e.Next() {
        fmt.Println(e.Value.(int))
    }
}

List에 대한 기본값은 빈 리스트(*List는 list.New로도 생성할 수 있다)다. 값은 PushBack을 이용해 추가된다. 첫 번째 원소를 구한 다음 nil을 만날 때까지 링크를 따라감으로써 각 항목을 순회한다.

정렬
sort 패키지에는 임의의 데이터를 정렬하는 데 사용할 수 있는 함수가 들어 있다. 이곳엔 기정의된 정렬 함수(정수 및 부동 소수점 수로 구성된 슬라이스에 쓸 수 있는)가 여럿 포함돼 있다. 다음은 직접 정의한 데이터를 정렬하는 예제다.

package main
 
import ("fmt" ; "sort")
 
type Person struct {
    Name string
    Age int
}
 
type ByName []Person
 
func (this ByName) Len() int {
    return len(this)
}
func (this ByName) Less(i, j int) bool {
    return this[i].Name < this[j].Name
}
func (this ByName) Swap(i, j int) {
    this[i], this[j] = this[j], this[i]
}
 
func main() {
    kids := []Person{
        {"Jill",9},
        {"Jack",10},
    }
    sort.Sort(ByName(kids))
    fmt.Println(kids)
}
sort 패키지의 Sort 함수는 sort.Interface를 전달받아 그것을 정렬한다. sort.Interface는 3개의 메서드를 필요로 하는데, Len, Less, Swap이 여기에 해당한다. 정렬 방식을 직접 정의하려면 새 타입(ByName)을 만들어 정렬하고자 하는 것의 슬라이스에 상응하게끔 만들면 된다. 그런 다음 3개의 메서드를 정의한다.

그러고 나면 인명부를 정렬하는 작업은 리스트를 새로운 타입으로 형변환하는 것만큼이나 쉽다. 다음과 같은 식으로 나이순으로 정렬할 수도 있다.

type ByAge []Person
func (this ByAge) Len() int {
    return len(this)
}
func (this ByAge) Less(i, j int) bool {
    return this[i].Age < this[j].Age
}
func (this ByAge) Swap(i, j int) {
    this[i], this[j] = this[j], this[i]
}