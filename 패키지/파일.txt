Go에서 파일을 열려면 os 패키지에 포함된 Open 함수를 사용하면 된다. 다음은 파일의 내용을 읽어 터미널에 출력하는 예제다.


package main
 
import (
    "fmt"
    "os"
)
 
func main() {
    file, err := os.Open("test.txt")
    if err != nil {
        // 오류를 처리
        return
    }
    defer file.Close()
 
    // 파일의 크기를 구함
    stat, err := file.Stat()
    if err != nil {
        return
    }
 
    // 파일을 읽음
    bs := make([]byte, stat.Size())
    _, err = file.Read(bs)
    if err != nil {
        return
    }
 
    str := string(bs)
    fmt.Println(str)
}
여기서는 파일을 연 직후에 defer file.Close()를 사용해 함수 실행이 완료된 후에 곧바로 파일이 닫히게 만들었다. 파일을 읽는 것은 굉장히 자주 하는 작업이므로 파일을 읽는 더 짧은 방법이 있다.

package main
 
import (
    "fmt"
    "io/ioutil"
)
 
func main() {
    bs, err := ioutil.ReadFile("test.txt")
    if err != nil {
        return
    }
    str := string(bs)
    fmt.Println(str)
}

다음은 파일을 생성하는 예제다.


package main
 
import (
    "os"
)
 
func main() {
    file, err := os.Create("test.txt")
    if err != nil {
        // 오류를 처리
        return
    }
    defer file.Close()
 
    file.WriteString("test")
}
디렉터리의 내용을 구할 때도 똑같이 os.Open 함수를 사용하지만 파일명 대신 디렉터리 경로를 지정한다. 그런 다음 Readdir 메서드를 호출하면 된다.

package main
 
import (
    "fmt"
    "os"
)
 
func main() {
    dir, err := os.Open(".")
    if err != nil {
        return
    }
    defer dir.Close()
 
    fileInfos, err := dir.Readdir(-1)
    if err != nil {
        return
    }
    for _, fi := range fileInfos {
        fmt.Println(fi.Name())
    }
}
폴더를 재귀적으로 열람하고 싶을 때가 있다(즉, 폴더의 내용과 모든 하위 폴더, 모든 하위 폴더의 하위 폴더, ...를 읽는다). 이러한 작업을 손쉽게 할 수 있게 path/filepath 패키지에는 Walk 함수가 제공된다.

package main
 
import (
    "fmt"
    "os"
    "path/filepath"
)
 
func main() {
    filepath.Walk(".", func(path string, info os.FileInfo, err error) error {
        fmt.Println(path)
        return nil
    })
}

Walk에 전달하는 함수는 루트 폴더 안에 들어 있는 모든 파일과 폴더에 대해 호출된다(이 경우 루트 폴더는 .이다).