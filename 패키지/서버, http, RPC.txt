Go에서 네트워크 서버를 작성하는 것은 굉장히 쉽다. 먼저 TCP 서버를 만드는 법을 살펴보자.

package main
 
import (
    "encoding/gob"
    "fmt"
    "net"
)
 
func server() {
    // 포트 대기
    ln, err := net.Listen("tcp", ":9999")
    if err != nil {
        fmt.Println(err)
        return
    }
    for {
        // 연결 수락
        c, err := ln.Accept()
        if err != nil {
            fmt.Println(err)
            continue
        }
        // 연결 처리
        go handleServerConnection(c)
    }
}
 
func handleServerConnection(c net.Conn) {
    // 메시지 수신
    var msg string
    err := gob.NewDecoder(c).Decode(&msg)
    if err != nil {
        fmt.Println(err)
    } else {
        fmt.Println("Received", msg)
    }
 
    c.Close()
}
 
func client() {
    // 서버에 연결
    c, err := net.Dial("tcp", "127.0.0.1:9999")
    if err != nil {
        fmt.Println(err)
        return
    }
    // 메시지 송신
    msg := "Hello World"
    fmt.Println("Sending", msg)
    err = gob.NewEncoder(c).Encode(msg)
    if err != nil {
        fmt.Println(err)
    }
 
    c.Close()
}
 
func main() {
    go server()
    go client()
 
    var input string
    fmt.Scanln(&input)
}
이 예제에서는 encoding/gob 패키지를 사용했는데, 이 패키지를 이용하면 다른 Go 프로그램에서(또는 이 경우 동일한 Go 프로그램에서) 값을 읽을 수 있도록 Go 값을 손쉽게 인코딩할 수 있다. 추가적인 인코딩은 encoding 아래의 패키지(encoding/json 같은)나 서드파티 패키지에서 찾아볼 수 있다(가령 bson 지원을 위해 labix.org/v2/mgo/bson 패키지를 사용할 수도 있다).

HTTP
HTTP 서버는 훨씬 더 쉽게 설정해서 사용할 수 있다.

package main
 
import ("net/http" ; "io")
 
func hello(res http.ResponseWriter, req *http.Request) {
    res.Header().Set(
        "Content-Type",
        "text/html",
    )
    io.WriteString(
        res,
        `<doctype html>
<html>
    <head>
        <title>Hello World</title>
    </head>
    <body>
        Hello World!
    </body>
</html>`,
    )
}
 
func main() {
    http.HandleFunc("/hello", hello)
    http.ListenAndServe(":9000", nil)
}
HandleFunc에서는 인자로 전달한 함수를 호출함으로써 URL 라우팅(/hello)를 처리한다. FileServer를 이용하면 정적 파일을 처리할 수도 있다.

http.Handle(
    "/assets/",
    http.StripPrefix(
        "/assets/",
        http.FileServer(http.Dir("assets")),
    ),
)
RPC
net/rpc(원격 프로시저 호출) 패키지와 net/rpc/jsonrpc 패키지에서는 네트워크를 통해 호출할 수 있는(단지 프로그램 내에서 호출하는 것이 아니라) 메서드를 노출하는 손쉬운 수단을 제공한다.

package main
 
import (
    "fmt"
    "net"
    "net/rpc"
)
 
type Server struct {}
func (this *Server) Negate(i int64, reply *int64) error {
    *reply = -i
    return nil
}
 
func server() {
    rpc.Register(new(Server))
    ln, err := net.Listen("tcp", ":9999")
    if err != nil {
        fmt.Println(err)
        return
    }
    for {
        c, err := ln.Accept()
        if err != nil {
            continue
        }
        go rpc.ServeConn(c)
    }
}
 
func client() {
    c, err := rpc.Dial("tcp", "127.0.0.1:9999")
    if err != nil {
        fmt.Println(err)
        return
    }
    var result int64
    err = c.Call("Server.Negate", int64(999), &result)
    if err != nil {
        fmt.Println(err)
    } else {
        fmt.Println("Server.Negate(999) =", result)
    }
}
 
func main() {
    go server()
    go client()
 
    var input string
    fmt.Scanln(&input)
}
이 프로그램은 노출하고자 하는 메서드를 모두 담은 객체를 생성하고 Negate 메서드를 클라이언트에서 호출하고 있다는 점만 제외하면 TCP 예제와 비슷하다. 더 자세한 사항은 net/rpc의 문서를 참고한다.