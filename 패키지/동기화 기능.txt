Go에서 동시성과 동기화를 처리할 때 선호되는 방법은 10장에서 살펴본 것처럼 고루틴과 채널을 이용하는 것이다. 하지만 Go에서는 sync와 sync/atomic 패키지에서 좀 더 전통적인 다중 스레드 루틴을 제공한다.

뮤텍스
뮤텍스(상호 배타적인 잠금; mutual exclusive lock)은 한 번에 단 하나의 스레드만이 코드 영역을 제어하게 해서 비원자적인 연산으로부터 공유 자원을 보호하는 데 사용된다. 다음은 뮤텍스를 사용하는 예제다.

package main
 
import (
    "fmt"
    "sync"
    "time"
)
func main() {
    m := new(sync.Mutex)
 
    for i := 0; i < 10; i++ {
        go func(i int) {
            m.Lock()
            fmt.Println(i, "start")
            time.Sleep(time.Second)
            fmt.Println(i, "end")
            m.Unlock()
        }(i)
    }
 
    var input string
    fmt.Scanln(&input)
}
뮤텍스(m)가 잠기면 그것이 해제되기 전까지 해당 뮤텍스를 잠그려는 다른 어떤 시도도 차단된다. sync/atomic 패키지에서 제공되는 뮤텍스나 다른 동기화 기능을 사용할 때는 세심한 주의를 기울여야 한다.

전통적인 다중 스레드 프로그래밍은 수월하지 않다. 실수를 저지르기 쉽고 그러한 실수는 찾기가 힘든데, 굉장히 특정한 상황에서, 비교적 드물게 일어나고 발생하는 상황을 재현하기가 어렵기 때문이다. Go의 큰 강점 가운데 하나는 Go에서 제공하는 동시성 기능들이 스레드와 잠금에 비해 이해하고 적절히 사용하기가 훨씬 수월하기 때문이다.