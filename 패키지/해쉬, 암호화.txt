해시 함수는 데이터 집합을 전달받아 그것을 더 작은 고정된 크기로 줄인다. 해시는 데이터를 찾는 것에서부터 변경 여부을 손쉽게 탐지하는 것에 이르기까지 모든 프로그래밍 분야에서 자주 사용된다. Go에서 제공하는 해시 함수는 크게 암호화와 비암호화와 관련된 해시로 나뉜다.

비암호화 해시 함수는 hash 패키지에서 찾을 수 있으며, adler32, crc32, crc64, fnv를 포함한다. 다음은 crc32를 사용하는 예제다.

package main
 
import (
    "fmt"
    "hash/crc32"
)
 
func main() {
    h := crc32.NewIEEE()
    h.Write([]byte("test"))
    v := h.Sum32()
    fmt.Println(v)
}
crc32 해시 객체는 Writer 인터페이스를 구현하고 있으므로 다른 Writer와 마찬가지로 바이트를 쓸 수 있다. 모든 것을 쓰고 나면 Sum32()를 호출해 uint32 값을 반환하고 싶을 것이다. crc32의 주된 용도는 두 파일을 비교하는 것이다. 두 파일에 대한 Sum32 값이 동일하면 두 파일이 동일할 확률이 굉장히 높다(100% 확신할 수는 없지만). 값이 다르다면 두 파일이 확실히 같지 않음을 의미한다.

package main
 
import (
    "fmt"
    "hash/crc32"
    "io/ioutil"
)
 
func getHash(filename string) (uint32, error) {
    bs, err := ioutil.ReadFile("test1.txt")
    if err != nil {
        return 0, err
    }
    h:= crc32.NewIEEE()
    h.Write(bs)
    return h.Sum32(), nil
}
 
func main() {
    h1, err := getHash("test1.txt")
    if err != nil {
        return
    }
    h2, err := getHash("test2.txt")
    if err != nil {
        return
    }
    fmt.Println(h1, h2, h1 == h2)
}
암호화 해시 함수는 그것에 대응되는 비암호화 해시 함수와 비슷하지만 역으로 변환하기 힘들다는 특성이 더해졌다. 암호화 해시에 데이터 집합을 부여할 경우 해시가 어떤 과정을 거쳐 만들어졌는지 파악하기가 굉장히 어렵다. 이러한 해시는 보안 애플리케이션에 자주 사용된다.

한 가지 자주 사용되는 암호화 해시 함수로 SHA-1이 있다. 다음은 SHA-1을 사용하는 예제다.

package main
 
import (
    "fmt"
    "crypto/sha1"
)
 
func main() {
    h := sha1.New()
    h.Write([]byte("test"))
    bs := h.Sum([]byte{})
    fmt.Println(bs)
}
이 예제는 crc32 예제와 굉장히 비슷한데, crc32와 sha1 모두 hash.Hash 인터페이스를 구현하기 때문이다. 주된 차이점으로 crc32는 32비트 해시를 계산하는 반면 sha1은 160비트 해시를 계산한다는 것이다. 160비트 숫자를 표현하는 네티이브 타입은 없으므로 여기서는 20바이트짜리 슬라이스를 대신 사용했다.

