마지막으로 함수는 자기 자신을 호출할 수 있다. 다음은 숫자의 팩토리얼을 계산하는 한 방법이다.

func factorial(x uint) uint {
    if x == 0 {
        return
    }
    return x * factorial(x-1)
}
factorial은 자기 자신을 호출하는데, 이를 통해 이 함수가 재귀적인 성질을 띤다. 이 함수의 동작 방식을 더 잘 이해하기 위해 factorial(2)가 동작하는 과정을 따라가 보자. * x == 0인가? (x는 2) * x - 1의 팩토리얼을 구한다 * x == 0인가? (x는 1) * x - 1의 팩토리얼을 구한다 * x == 0인가? 그렇다. 1을 반환한다. * 1 * 1을 반환한다 * 2 * 1을 반환한다

클로저와 재귀는 함수형 프로그래밍으로 알려진 패러다임의 근간을 이루는 강력한 프로그래밍 기법이다. 대부분의 사람들은 함수형 프로그래밍이 반복문, if 문, 변수와 간단한 함수를 기반으로 하는 접근법에 비해 더 이해하기 어렵다는 사실을 발견하게 될 것이다.

7.6 지연, 패닉, 복구
Go에는 defer라고 하는 특별한 구문이 있는데, 이것은 해당 함수가 실행을 완료했을 때 실행을 위해 호출 스케줄을 잡는다. 다음 프로그램을 보자.

package main
 
import "fmt"
 
func first() {
    fmt.Println("1st")
}
func second() {
    fmt.Println("2nd")
}
func main() {
    defer second()
    first()
}

이 프로그램은 1st를 출력한 후 이어서 2nd를 출력한다. 기본적으로 지연은 second에 대한 호출을 해당 함수의 끝으로 옮긴다.


func main() {
    first()
    second()
}
defer는 어떤 식으로든 자원을 해제해야 할 때 자주 사용된다. 예를 들어, 파일을 열 때 나중에 해당 파일을 반드시 닫아야 한다. defer를 이용하면 다음과 같이 하면 된다.

f, _ := os.Open(filename)
defer f.Close()
이 방법에는 세 가지 장점이 있다. (1) Close 호출을 Open 호출 가까이에 둬서 이해하기가 쉽고, (2) 함수에 반환문이 여러 개 있더라도(if에 하나가 들어 있고, else에 하나가 들어 있는 것처럼) Close가 두 반환문 앞에서 모두 호출될 것이며, (3) 지연된 함수는 런타임 패닉이 일어나더라도 실행될 것이다.

패닉과 복구
앞에서 panic 함수를 호출해 런타임 오류를 일으키는 함수를 만들었다. Go에 내장된 recover 함수를 이용하면 런타임 패닉을 처리할 수 있다. recover는 패닉을 중단하고 panic 호출에 전달된 값을 반환한다. recover를 다음과 같은 식으로 사용하고 싶을지도 모르겠다.

package main
 
import "fmt"
 
func main() {
    panic("PANIC")
    str := recover()
    fmt.Println(str)
}
하지만 이 경우 recover는 절대 호출되지 않을 텐데, panic에 대한 호출이 즉시 함수 호출을 중단할 것이기 때문이다. 대신 defer와 짝을 맞춰야 한다. package main

import "fmt"
 
func main() {
    defer func() {
        str := recover()
        fmt.Println(str)
    }()
    panic("PANIC")
}
일반적으로 패닉은 프로그래밍 오류를 나타내거나(가령 범위를 벗어난 배열 인덱스에 접근하려고 시도하거나 맵을 초기화하는 것을 잊어버리는 등) 손쉽게 복구할 수 없는 예외적인 상황을 나타낸다(그래서 "패닉"이라고 하는 것이다).