문자열
2장에서 본 것과 마찬가지로 문자열은 텍스트를 표현하는 데 사용되는 길이가 정해진 문자의 나열이다. Go 언어의 문자열은 개별 바이트로 구성돼 있으며, 보통 각 문자마다 한 바이트를 차지한다(중국어 같은 다른 언어의 문자는 한 바이트 이상으로 표현된다).

문자열 리터럴은 "Hello World"처럼 큰 따옴표를 이용하거나 Hello World처럼 역따옴표를 이용해 생성할 수 있다. 이러한 두 방법의 차이점은 큰따옴표로 만든 문자열은 줄바꿈을 포함할 수 없고 특별한 이스케이프 문자열을 사용할 수 있다는 점이다. 예를 들어, \n은 줄바꿈으로 대체되고 \t는 탭 문자로 대체된다.


문자열에 대해 자주 사용되는 연산으로는 문자열의 길이를 구하거나(len("Hello World")) 문자열 내의 각 문자에 접근하거나("Hello World"[1]) 두 문자열을 하나로 합치는("Hello " + "World") 것이 있다. 앞에서 만든 프로그램을 수정해 이를 시험해 보자.

package main
 
import "fmt"
 
func main() {
    fmt.Println(len("Hello World"))
    fmt.Println("Hello World"[1])
    fmt.Println("Hello " + "World")
}
여기서 몇 가지 알아야 할 사항은 다음과 같다.

공백도 하나의 문자로 간주되므로 문자열의 길이는 10이 아니라 11이며, 세 번째 줄은 "Hello"가 아니라 "Hello "다.

문자열에는 1이 아닌 0부터 시작하는 "인덱스"가 지정돼 있다. [1]은 첫 번째 요소가 아닌 두 번째 요소를 반환한다. 아울러 프로그램을 실행하면 e이 아닌 101이 출력된다는 점을 눈여겨보자. 이것은 문자가 바이트로 표현되기 때문이다(바이트는 정수라는 사실을 기억하자). 인덱스에 관해 생각하는 한 가지 방법은 문자열을 "Hello World"₁이라고 보여주는 것이다. 이것은 "문자열 Hello World sub 1"이나 "문자열 Hello World at 1" 또는 "문자열 Hello World의 두 번째 문자"로 읽을 것이다.

문자열 연결은 덧셈과 같은 기호를 쓴다. Go 컴파일러는 인자의 타입을 토대로 어떻게 처리할지 판단한다. +의 양측이 모두 문자열이므로 컴파일러는 덧셈이 아닌 문자열 연결을 의도한다고 가정한다(문자열을 더하는 것은 무의미한 일이다).