2장에서는 문자열이라는 데이터 타입(data type)을 이용해 Hello World를 저장했다. 데이터 타입은 관련 값의 집합을 분류하고 해당 값에 대한 연산을 기술하며, 값이 저장되는 방식을 정의한다. 타입은 한번에 이해하기에는 어려운 개념일 수 있으므로 Go에서 타입이 구현되는 방법을 살펴보기에 앞서 조금 다른 몇 가지 관점에서 타입을 살펴보겠다.

때때로 철학자들은 타입과 토큰을 구분하기도 한다. 예를 들어 맥스(Max)라는 개가 있다고 해보자. 맥스는 토큰(특별한 사례 또는 구성원)이고 개(일반적인 개념)는 타입이다. "개" 또는 "개라는 특징"은 모든 개가 공통적으로 지니고 있는 특성들을 기술한다. 과도하게 단순화한 면이 없지 않아 있지만 다음과 추론할 수 있을지도 모른다. 즉, 모든 개는 다리가 4개이며, 맥스는 개이므로, 맥스는 다리가 4개다. 프로그래밍 언어에서 타입은 이와 비슷한 방식으로 동작한다. 모든 문자열은 길이가 있으며, x는 문자열이고, 따라서 x는 길이를 가지고 있다.

수학에서는 종종 집합에 관해 이야기하기도 한다. 이를 테면, ℝ(모든 실수의 집합)이나 ℕ(모든 자연수의 집합)이 있다. 이러한 집합의 각 원소는 해당 집합의 다른 모든 원소와 특성을 공유한다. 예를 들어, 모든 자연수에 대해서는 결합 법칙이 성립한다. 즉, "모든 자연수 a, b, c에 대해 a + (b + c) = (a + b) + c와 a × (b × c) = (a × b) × c.가 성립한다." 이런 식으로 집합은 프로그래밍 언어에서 타입과 비슷한데, 특정 타입의 모든 값은 일정한 특징을 공유하기 때문이다.

Go는 정적 타입 프로그래밍 언어다. 이는 변수가 항상 특정 타입을 지니고 있고 해당 타입은 변경될 수 없다는 의미다. 정적 타입 체계는 처음에는 조금 성가셔 보일 수도 있다. 프로그램이 마침내 컴파일되기까지 프로그램을 수정하는 과정에서 상당한 양의 시간을 보내게 될 것이다. 하지만 타입은 프로그램이 하려는 일을 추론하고 흔히 저지르곤 하는 매우 다양한 실수를 잡아내는 데 도움될 것이다.

Go에는 이제부터 좀 더 자세히 살펴볼 내장 데이터 타입이 다수 포함돼 있다.