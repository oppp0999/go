Go에서는 숫자를 표현하는 여러 다양한 타입을 제공한다. 일반적으로 숫자는 정수와 부동 소수점 수라는 두 가지 종류로 나눈다.

정수
정수(수학에도 있는 정수와 마찬가지로)는 소수부가 없는 숫자다(..., -3, -2, -1, 0, 1, ...). 우리가 숫자를 표현하는 데 사용하는 10진수 체계와 달리 컴퓨터는 2진수 체계를 사용한다.

우리의 숫자 체계는 10가지 숫자로 구성돼 있다. 사용 가능한 자릿수가 부족해지면 두(그다음으로 셋, 넷, 다섯) 자릿수를 옆으로 계속 이어지게 해서 큰 수를 표현한다. 예를 들어, 9 다음 숫자는 10이고, 99 다음 숫자는 100과 같은 식으로 이어진다. 컴퓨터도 동일한 과정을 밟지만 10개의 숫자 대신 2개의 숫자만 이용한다. 따라서 0, 1, 10, 11, 100, 101, 110, 111과 같은 식으로 숫자를 센다. 우리가 사용하는 것과 컴퓨터가 사용하는 숫자 체계 간의 또 다른 차이점으로는 모든 정수 정수 타입의 크기가 정해져 있다는 것이다. 즉, 각 숫자마다 정해진 수의 공간만을 차지한다. 따라서 4비트 정수는 0000, 0001, 0010, 0011, 0100과 같을 것이다. 결국 정해진 공간을 다 써버리면 컴퓨터는 맨 처음으로 되돌아간다(이 경우 프로그램이 매우 이상하게 동작할 수 있다).

Go의 정수 타입으로는 uint8, uint16, uint32, uint64, int8, int16, int32, int64가 있다. 8, 16, 32, 64는 각 타입이 사용하는 비트의 수를 나타낸다. uint는 "부호가 없는 정수(unsigned integer)"를 나타내고, int는 "부호가 있는 정수(signed integer)"를 나타낸다. 부호가 없는 정수에는 양수(또는 0)만 담긴다. 더불어 두 개의 별칭 타입도 있는데, uint8과 같은 byte와 uint32와 같은 rune이 있다. 바이트는 컴퓨터에서 굉장히 흔히 사용되는 측정 단위이므로(1바이트 = 8비트, 1024바이트 = 1킬로바이트, 1024킬로바이트 = 1메가바이트, ...) Go의 byte 데이터 타입은 다른 타입을 정의하는 데 자주 사용되기도 한다. uint, int, uintptr이라고 하는 장비에 의존적인 정수 타입도 있다. 이러한 데이터 타입은 현재 사용 중인 아키텍처의 유형에 따라 크기가 달라지기 때문에 장비에 의존적이다.

일반적으로 정수를 이용할 경우 int 타입을 사용하면 될 것이다.

부동 소수점 수
부동 소수점 수(floating point number)는 소수부가 포함된 숫자(실수, 예: 1.234, 123.4, 0.00001234, 12340000)다. 컴퓨터에서 부동 소수점 수가 실제로 표현되는 방식은 상당히 복잡하며 세세한 표현 방식까지 알 필요는 없다. 따라서 지금은 다음과 같은 사항만 염두에 두면 된다.

부동 소수점 수는 부정확하다. 때때로 숫자를 표현하는 것이 불가능한 경우도 있다. 예를 들어, 1.01 - 0.99를 계산하면 0.020000000000000018(우리가 예상한 숫자에 굉장히 근접한 숫자이지만 정확히 같은 숫자는 아니다)가 결과로 나타난다.

정수와 달리 부동 소수점 수는 일정한 크기(32비트나 64비트)가 있다. 크기가 큰 부동 소수점 수를 사용할수록 숫자의 정확도가 높아진다(표현 가능한 자릿수에 따라).

숫자와 더불어 다른 여러 값도 표현할 수 있는데, 가령 "숫자가 아님"(0/0과 같은 것을 표현하는 데 사용되는 NaN)이나 양의 무한대 및 음의 무한대(+∞ and −∞) 같은 것이 있다.

Go에는 float32와 float64라는 두 가지 부동 소수점 타입(각각 단정도 부동 소수점 수와 배정도 부동 소수점 수라고도 한다)을 비롯해 complex64와 complex128이라고 하는 복소수(허수부가 있는 숫자)를 나타내는 두 가지 타입이 있다. 일반적으로 여기서는 부동 소수점 수를 사용할 때 float64를 사용할 것이다.

예제
숫자를 사용하는 예제 프로그램을 작성해 보자. 먼저 chapter3이라는 폴더를 만들고 다음과 같은 내용이 담긴 main.go 파일을 만든다.


package main
 
import "fmt"
 
func main() {
    fmt.Println("1 + 1 =", 1 + 1)
}
프로그램을 실행하면 다음과 같은 결과가 출력된다.

$ go run main.go
1 + 1 = 2
이 프로그램은 2장에서 작성한 프로그램과 매우 비슷하다. 똑같이 패키지 선언과 임포트 선언이 있고 함수 선언과 Println 함수를 사용한다는 점까지 동일하다. 그런데 이번에는 Hello World라는 문자열을 출력하는 대신 1 + 1 =이라는 문자열에 이어 1 + 1이라는 수식의 결과를 출력한다. 이 수식은 세 부분으로 구성돼 있다. 숫자 리터럴인 1(int 타입에 해당)과 + 연산자(덧셈을 나타내는), 그리고 또 다른 숫자 리터럴인 1로 구성돼 있다. 이번에는 부동 소수점 수를 이용해 같은 작업을 수행해 보자.


fmt.Println("1 + 1 =", 1.0 + 1.0)
여기서는 .0을 사용해 Go가 이것이 정수가 아니라 부동 소수점 수라는 사실을 알게 했다. 이 프로그램을 실행하면 이전과 동일한 결과가 출력될 것이다.

Go에는 덧셈뿐 아니라 다른 여러 연산자도 있다.

연산자	연산
+	덧셈
-	뺄셈
*	곱셈
/	나눗셈
%	나머지