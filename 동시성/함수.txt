함수(function)는 0개 이상의 입력 매개변수를 0개 이상의 출력 매개변수로 매핑하는 독립적인 코드 영역이다. 함수(프로시저나 서브루틴으로도 알려진)는 블랙 박스로 자주 표현되기도 한다(블랙 박스는 함수를 나타낸다).

함수

지금까지 Go로 작성한 프로그램에서는 단 하나의 함수만을 사용했다.

func main() {}

func main() {
    xs := []float64{98,93,77,82,83}
 
    total := 0.0
    for _, v := range xs {
        total += v
    }
    fmt.Println(total / float64(len(xs)))
}
이 프로그램은 숫자의 평균을 계산한다. 이처럼 평균을 구하는 것은 굉장히 일반적인 문제이므로 함수로 정의하기에 안성맞춤이다.

average 함수에서는 float64의 슬라이스를 받아 float64를 반환할 필요가 있다. 이 함수를 main 함수 앞에 집어넣는다.

func average(xs []float64) float64 {
    panic("Not Implemented")
}
함수는 func라는 키워드로 시작해 이어서 함수의 이름이 나온다. 함수의 매개변수(입력)는 이름 타입, 이름 타입, ...과 같은 식으로 정의된다. 여기서 작성한 함수는 xs라는 이름의 매개변수 하나만 받는다. 매개변수가 끝나면 반환형을 지정한다. 매개변수와 반환형을 총칭해서 함수의 함수의 서명(signature)이라 한다.

마지막으로 중괄호 사이에 위치하는 문장의 나열인 함수 본문이 있다. 함수 본문에서는 panic이라는 내장 함수를 호출하는데, 이 함수는 런타임 오류를 일으킨다(이후 장에서 패닉에 관해 좀 더 살펴보겠다). 함수를 작성하는 일은 어려울 수도 있으므로 한 번에 전체 작업을 구현하려 하기보다는 절차를 관리 가능한 덩어리로 나누는 것이 좋다.

이제 main 함수의 코드를 average 함수로 옮겨보자.


func average(xs []float64) float64 {
    total := 0.0
    for _, v := range xs {
        total += v
    }
    return total / float64(len(xs))
}
여기서 fmt.Println을 return으로 변경한 부분을 눈여겨보자. 반환문은 함수가 즉시 실행을 중단하고 해당 함수를 호출한 함수로 값을 반환하게 한다. main 함수를 다음과 같이 수정한다.

func main() {
    xs := []float64{98,93,77,82,83}
    fmt.Println(average(xs))
}

이 프로그램을 실행하면 원래 코드와 정확히 같은 결과를 출력할 것이다. 몇 가지 염두에 둘 사항은 다음과 같다.

매개변수의 이름은 해당 함수를 호출하는 함수의 매개변수와 일치하지 않아도 된다. 예를 들어, 프로그램을 다음과 같이 작성해도 된다.

func main() {
   someOtherName := []float64{98,93,77,82,83}
   fmt.Println(average(someOtherName))
}
이렇게 하더라도 프로그램은 여전히 동작할 것이다.

함수는 해당 함수를 호출하는 함수에 들어 있는 것에 접근할 수 없다. 다음 코드는 동작하지 않는다.

func f() {
    fmt.Println(x)
}
func main() {
    x := 5
    f()
}
대신 다음과 같이 작성하거나

func f(x int) {
    fmt.Println(x)
}
func main() {
    x := 5
    f(x)
}
다음과 같이 작성해야 한다.

var x int = 5
    func f() {
    fmt.Println(x)
}
func main() {
    f()
}
함수는 "스택(stack)" 상에 만들어진다. 다음과 같은 프로그램이 있다고 해보자.

func main() {
    fmt.Println(f1())
}
func f1() int {
    return f2()
}
func f2() int {
    return 1
}
이를 다음과 같이 시각화할 수 있다.

스택

함수를 호출할 때마다 함수를 호출 스택에 집어넣고 함수에서 반환될 때마다 스택에서 마지막 함수를 꺼낸다.

반환형의 이름을 지정할 수도 있다.

func f2() (r int) {
    r = 1
    return
}
