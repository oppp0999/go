고루틴은 다른 함수를 동시에 실행할 수 있는 함수를 일컫는다. 고루틴을 생성하려면 go라는 키워드 다음에 함수 호출을 지정하면 된다.

package main
 
import "fmt"
 
func f(n int) {
    for i := 0; i < 10; i++ {
        fmt.Println(n, ":", i)
    }
}
 
func main() {
    go f(0)
    var input string
    fmt.Scanln(&input)
}
이 프로그램은 두 개의 고루틴으로 구성돼 있다. 첫 번째 고루틴은 암시적이고 main 함수 자체다. 두 번째 고루틴은 go f(0)을 호출할 때 만들어진다. 보통 함수를 호출하면 프로그램에서는 함수 안의 문장을 모두 실행한 다음 해당 호출 구문 다음에 있는 줄로 반환된다. 고루틴을 이용하면 즉시 다음 줄로 실행 흐름이 반환되고 함수 호출이 완료되기까지 기다리지 않는다. 이러한 이유로 예제 프로그램에서 Scanln 함수를 호출한 것이다. 이 문장이 없으면 프로그램에서는 숫자가 모두 출력되기 전에 프로그램이 종료될 것이다.

고루틴은 생성하는 데 비용이 많이 들지 않아서 수천 개에 달하는 고루틴도 손쉽게 생성할 수 있다. 프로그램을 다음과 같이 수정해 10개의 고루틴이 실행되게 할 수 있다.


func main() {

    for i := 0; i < 10; i++ {
        go f(i)
    }
    var input string
    fmt.Scanln(&input)
}
이 프로그램을 실행하면 고루틴이 동시에 실행되는 것이 아니라 순서대로 실행되는 것처럼 보인다는 사실을 알 수도 있다. 이번에는 함수에 time.Sleep과 rand.Intn을 이용해 지연시간을 더해 보자.

package main
 
import (
    "fmt"
    "time"
    "math/rand"
)
 
func f(n int) {
    for i := 0; i < 10; i++ {
        fmt.Println(n, ":", i)
        amt := time.Duration(rand.Intn(250))
        time.Sleep(time.Millisecond * amt)
    }
}
 
func main() {
    for i := 0; i < 10; i++ {
        go f(i)
    }
    var input string
    fmt.Scanln(&input)
}

f는 0에서 10까지 숫자를 출력하는데, 각 숫자를 출력할 때마다 0에서 250밀리초 사이의 시간 동안 기다린다. 이제 고루틴은 동시에 실행될 것이다.ㄴ