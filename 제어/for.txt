for 문을 이용하면 여러 문장(블록)을 여러 번에 걸쳐 반복할 수 있다. 앞의 프로그램을 for 문을 이용해 재작성하면 다음 코드와 같다.

package main
 
import "fmt"
 
func main() {
    i := 1
    for i <= 10 {
        fmt.Println(i)
        i = i + 1
    }
}

먼저 출력하고 싶은 숫자를 저장하는 데 사용하는 i라는 변수를 만들었다. 그런 다음 for라는 키워드를 이용해 for 루프를 작성했는데, true이거나 false가 되는 조건식을 지정하고, 마지막으로 실행할 블록을 작성했다. for 루프는 다음과 같이 동작한다.

i <= 10("i는 10보다 작거나 같다")이라는 수식을 평가(실행)한다. 이것의 평가 결과가 참이면 블록 안의 문장을 실행한다. 그렇지 않으면 블록 이후에 나오는 다음 줄로 이동한다(이 경우 for 루프 이후에 아무것도 없으므로 프로그램이 종료했다).
블록 안의 문장을 실행하고 나면 for 문의 처음으로 되돌아가 1단계부터 반복한다.
i = i + 1이라고 적힌 줄은 굉장히 중요한데, 이 부분이 없으면 i <= 10이 항상 true로 평가되어 프로그램이 멈추지 않을 것이기 때문이다(이러한 경우를 무한 루프라 한다).

연습 삼아 컴퓨터가 하는 것처럼 프로그램을 차례대로 실행해 보자.

i라는 변수를 생성하고 값으로 1을 할당
i <= 10인가? 그렇다.
i를 출력
i를 i + 1로 설정(이제 i의 값은 2)
i <= 10인가? 그렇다.
i를 출력
i를 i + 1로 설정(이제 i의 값은 3)
...
i를 i + 1로 설정(이제 i의 값은 11)
i <= 10인가? 아니다.
할 일이 남아있지 않으므로 프로그램을 종료
다른 프로그래밍 언어에는 다양한 종류의 루프(while, do, until, foreach, ...)가 있지만 Go에서는 다양한 방식으로 사용할 수 있는 단 하나의 루프만 제공한다. 앞의 프로그램은 다음과 같은 식으로도 작성할 수 있었다.


func main() {
    for i := 1; i <= 10; i++ {
        fmt.Println(i)
    }
}
이제 조건식에도 두 가지 다른 문장이 세미콜론으로 구분되어 포함돼 있다. 먼저 변수 초기화 구문이 나오고, 다음으로 매번 검사할 조건이 나오며, 마지막으로 변수를 "증가시킨다"(변수에 1을 더하는 것은 굉장히 자주 있는 일이라서 이를 위한 특별한 연산자인 ++이 있다. 이와 비슷하게 1을 빼는 것도 --로 할 수 있다).

이후 장에서는 for 루프를 이용하는 또 다른 방법을 보게 될 것이다.