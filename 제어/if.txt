앞에서 작성한 프로그램을 수정해서 각 줄에 1~10에 해당하는 숫자를 출력하는 대신 다음과 같이 각 숫자가 짝수인지 홀수인지도 출력하도록 만들어 보자.

1 홀수
2 짝수
3 홀수
4 짝수
5 홀수
6 짝수
7 홀수
8 짝수
9 홀수
10 짝수
먼저 어떤 숫자가 짝수인지 홀수인지 판별하는 방법이 필요하다. 이를 파악하는 손쉬운 방법은 숫자를 2로 나눠보는 것이다. 2로 나눴을 때 나누어 떨어지면 짝수이고, 그렇지 않으면 홀수다. 그럼 Go에서는 나머지를 어떻게 구할 수 있을까? % 연산자를 쓰면 된다. 1 % 2는 1이고, 2 % 2는 0이며, 3 % 2는 1과 같은 식이다.

다음으로 조건에 따라 서로 다른 코드를 실행하는 방법이 필요하다. 이 경우 if 문을 이용하면 된다.


if i % 2 == 0 {
    // 짝수
} else {
    // 홀수
}
조건 다음에 블록이 이어진다는 점에서 if 문은 for 문과 비슷하다. 필요할 경우 if 문에는 else 부분도 지정할 수 있다. 조건이 true로 평가되면 조건 다음에 나오는 블록이 실행되고, 그렇지 않을 경우 블록을 건너뛰거나 else 블록이 있을 경우 해당 블록이 실행된다.

if 문에는 else if 부분도 있을 수 있다.

if i % 2 == 0 {
    // 2로 나눌 수 있음
} else if i % 3 == 0 {
    // 3으로 나눌 수 있음
} else if i % 4 == 0 {
    // 4로 나눌 수 있음
}
각 조건은 위에서 아래로 검사되며, 첫 번째 조건이 참이면 그와 관련된 블록이 실행된다. 그럼 나머지 블록은 아무것도 실행되지 않으며, 나머지 블록의 조건들이 통과하더라도 마찬가지다(예를 들어 8은 4와 2로 나눌 수 있지만 // 4로 나눌 수 있음 블록은 결코 실행되지 않을 텐데, // 2로 나눌 수 있음 블록이 먼저 실행되기 때문이다).

지금까지 배운 내용을 모두 종합하면 다음과 같다.

func main() {
    for i := 1; i <= 10; i++ {
        if i % 2 == 0 {
            fmt.Println(i, "짝수")
        } else {
            fmt.Println(i, "홀수")
        }
    }
}

이 프로그램을 차례대로 실행해 보자.

int 타입의 변수 i를 생성하고 값으로 1을 할당
i가 10보다 작거나 같은가? 그렇다: 해당 블록으로 이동
i ÷ 2의 나머지가 0인가? 아니다: else 블록으로 이동
i의 값과 홀수를 차례대로 출력
i의 값을 증가시킴(조건 다음에 나오는 문장)
i가 10보다 작거나 같은가? 그렇다: 해당 블록으로 이동
i ÷ 2의 나머지가 0인가? 그렇다: if 블록으로 이동
i의 값과 짝수를 차례대로 출력
...
초등학교 이후로는 좀처럼 보기 힘든 나머지 연산자는 프로그래밍할 때 굉장히 유용하다. 테이블에 줄무늬를 넣는 것부터 데이터 집합을 분할하는 것까지 어디서든 이 연산자를 보게 될 것이다. s