맵(map)은 순서가 없는 키-값(key-value) 쌍의 집합이다. 맵은 연관 배열 또는 해시 테이블(hash table), 딕셔너리(dictionary)로도 알려져 있으며, 연관 키를 통해 값을 찾는 데 사용된다. 다음은 Go에서 맵을 사용하는 예제다.

var x map[string]int
맵 타입은 map 키워드에 이어 키 타입을 대괄호 안에, 그리고 마지막으로 값 타입을 지정해서 나타낸다. 이것을 소리 내서 읽으면 "x는 int에 대한 string의 맵이다"가 된다. 배열과 슬라이스와 마찬가지로 맵에도 대괄호를 이용해 접근할 수 있다. 다음 프로그램을 실행해 보자.

var x map[string]int
x["key"] = 10
fmt.Println(x)
그러면 다음과 같은 오류가 출력될 것이다.

panic: runtime error: assignment to entry in nil map
goroutine 1 [running]:
main.main()
  main.go:7 +0x4d

goroutine 2 [syscall]:
created by runtime.main
C:/Users/ADMINI~1/AppData/Local/Temp/2/bindit269497170/go/src/pkg/runtime/proc.c:221exit status 2
지금까지는 컴파일 시점 오류(compile-time error)만 봤다. 이것은 런타임 오류의 한 예다. 컴파일 시점 오류가 프로그램을 컴파일할 때 발생하는 데 반해 이름에서 알 수 있듯이 런타임 오류는 프로그램을 실행할 때 발생한다. 이 프로그램에서 발생한 문제는 맵을 사용하기 전에 초기화해야 한다는 것이다. 즉, 다음과 같이 작성해야 했다.

x := make(map[string]int)
x["key"] = 10
fmt.Println(x["key"])
이 프로그램을 실행하면 10이 출력될 것이다. x["key"] = 10이라는 문장은 배열에서 본 것과 비슷하지만 키가 정수가 아닌 문자열인데, 이는 맵의 키 타입이 string이기 때문이다. 키 타입을 int로 지정해 맵을 생성할 수도 있다.

x := make(map[int]int)
x[1] = 10
fmt.Println(x[1])
배열과 훨씬 더 비슷해 보이지만 몇 가지 차이점이 있다. 먼저 맵의 길이(len(x)로 구할 수 있는)가 새 항목을 맵에 추가할 때마다 바뀔 수 있다. 맵이 처음 생성되면 길이가 0이고, x[1] = 10을 실행하고 나면 길이가 1이 된다. 두 번째로 맵은 순차적이지 않다. x[1]을 실행할 경우 배열이라면 반드시 x[0]이 있다는 뜻이 되겠지만 맵에는 이 같은 요건이 없다. 내장 delete 함수를 이용해 맵에서 항목을 삭제할 수도 있다. delete(x, 1) 맵을 사용하는 다음 예제 프로그램을 살펴보자. package main

import "fmt"
 
func main() {
    elements := make(map[string]string)
    elements["H"] = "Hydrogen"
    elements["He"] = "Helium"
    elements["Li"] = "Lithium"
    elements["Be"] = "Beryllium"
    elements["B"] = "Boron"
    elements["C"] = "Carbon"
    elements["N"] = "Nitrogen"
    elements["O"] = "Oxygen"
    elements["F"] = "Fluorine"
    elements["Ne"] = "Neon"
    fmt.Println(elements["Li"])
}
elements는 첫 10개의 화학 원소를 나타내는 맵으로서 원소 기호를 인덱스로 사용한다. 이것은 맵을 룩업 테이블(lookup table)이나 딕셔너리(dictionary)로 사용하는 굉장히 보편적인 맵 활용법이다. 존재하지 않는 원소를 찾는다고 가정해 보자.

fmt.Println(elements["Un"])
이 코드를 실행하면 아무것도 반환되지 않을 것이다. 엄밀히 말해서 맵은 값 타입에 대해 0 값(문자열의 경우 빈 문자열에 해당한다)을 반환한다. 조건문으로 0 값을 검사할 수도 있지만(elements["Un"] == "") Go에서는 더 나은 방법을 제공한다.

name, ok := elements["Un"]
fmt.Println(name, ok)
맵의 요소에 접근할 경우 하나가 아닌 두 개의 값이 반환될 수 있다. 첫 번째 값은 탐색의 결과를, 두 번째 값은 탐색의 성공 여부를 나타낸다. Go에서는 다음과 같은 코드를 자주 볼 수 있다.

if name, ok := elements["Un"]; ok {
    fmt.Println(name, ok)
}
먼저 맵에서 값을 구하려고 한 다음, 값을 성공적으로 구할 경우 블록 안의 코드를 실행한다. 배열에서 본 것과 마찬가지로 맵을 생성하는 더 짧은 방법이 있다.

elements := map[string]string{
    "H": "Hydrogen",
    "He": "Helium",
    "Li": "Lithium",
    "Be": "Beryllium",
    "B": "Boron",
    "C": "Carbon",
    "N": "Nitrogen",
    "O": "Oxygen",
    "F": "Fluorine",
    "Ne": "Neon",
}
맵은 일반적인 정보를 저장하는 데 자주 사용된다. 단순히 원소의 이름을 저장하는 대신 원소의 표준 상태(실온에서의 물질의 상태)도 저장하게끔 프로그램을 수정해 보자.

func main() {
    elements := map[string]map[string]string{
          "H": map[string]string{
                "name":"Hydrogen",
                "state":"gas",
          },
          "He": map[string]string{
                "name":"Helium",
                "state":"gas",
          },
          "Li": map[string]string{
                "name":"Lithium",
                "state":"solid",
          },
          "Be": map[string]string{
                "name":"Beryllium",
                "state":"solid",
          },
          "B":  map[string]string{
                "name":"Boron",
                "state":"solid",
          },
          "C":  map[string]string{
                "name":"Carbon",
                "state":"solid",
          },
          "N":  map[string]string{
                "name":"Nitrogen",
                "state":"gas",
          },
          "O":  map[string]string{
                "name":"Oxygen",
                "state":"gas",
          },
          "F":  map[string]string{
                "name":"Fluorine",
                "state":"gas",
          },
          "Ne":  map[string]string{
                "name":"Neon",
                "state":"gas",
          },
    }
 
    if el, ok := elements["Li"]; ok {
           fmt.Println(el["name"], el["state"])
    } 
}
맵의 타입이 map[string]string에서 map[string]map[string]string으로 바뀐 것을 눈여겨보자. 이제 문자열에 대한 문자열의 맵에 대한 문자열 의 맵이 만들어졌다. 바깥쪽 맵은 원소 기호를 기반으로 한 룩업 테이블로 사용되고 안쪽 맵은 원소의 일반적인 정보를 저장하는 데 사용된다. 맵은 이와 같이 자주 사용되기도 하지만 9장에서는 구조적인 정보를 저장하는 더 나은 방법을 살펴보겠다.

